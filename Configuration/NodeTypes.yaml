'Neos.Neos:Node': &node
  search:
    fulltext:
      enable: true
  properties:
    '__identifier':
      search:
        elasticSearchMapping:
          type: string
          index: not_analyzed
        indexing: '${node.identifier}'

    '__workspace':
      search:
        elasticSearchMapping:
          type: string
          index: not_analyzed
        indexing: '${node.context.workspace.name}'

    '__path':
      search:
        elasticSearchMapping:
          type: string
          index: not_analyzed
        indexing: '${node.path}'

    '__parentPath':
      search:
        elasticSearchMapping:
          type: string
          index: not_analyzed
        # we index *all* parent paths as separate tokens to allow for efficient searching without a prefix query
        indexing: '${Indexing.buildAllPathPrefixes(node.parentPath)}'

    '__sortIndex':
      search:
        elasticSearchMapping:
          type: integer
        indexing: '${node.index}'

    '_removed':
      search:
        elasticSearchMapping: '' # deliberately don't map or index this
        indexing: ''

    # we index the node type INCLUDING ALL SUPERTYPES
    '__typeAndSupertypes':
      search:
        elasticSearchMapping:
          type: string
          index: not_analyzed
        indexing: '${Indexing.extractNodeTypeNamesAndSupertypes(node.nodeType)}'

    '_lastModificationDateTime':
      search:
        elasticSearchMapping:
          type: date
          format: 'date_time_no_millis'
        indexing: '${(node.lastModificationDateTime ? Date.format(node.lastModificationDateTime, "Y-m-d\TH:i:sP") : null)}'

    '_lastPublicationDateTime':
      search:
        elasticSearchMapping:
          type: date
          format: 'date_time_no_millis'
        indexing: '${(node.lastPublicationDateTime ? Date.format(node.lastPublicationDateTime, "Y-m-d\TH:i:sP") : null)}'

    '_creationDateTime':
      search:
        elasticSearchMapping:
          type: date
          format: 'date_time_no_millis'
        indexing: '${(node.creationDateTime ? Date.format(node.creationDateTime, "Y-m-d\TH:i:sP") : null)}'

'unstructured': *node

'Neos.Neos:Hidable':
  properties:
    '_hidden':
      search:
        indexing: '${node.hidden}'

'Neos.Neos:Timable':
  properties:
    '_hiddenBeforeDateTime':
      search:
        elasticSearchMapping:
          type: date
          format: 'date_time_no_millis'
        indexing: '${(node.hiddenBeforeDateTime ? Date.format(node.hiddenBeforeDateTime, "Y-m-d\TH:i:sP") : null)}'

    '_hiddenAfterDateTime':
      search:
        elasticSearchMapping:
          type: date
          format: 'date_time_no_millis'
        indexing: '${(node.hiddenAfterDateTime ? Date.format(node.hiddenAfterDateTime, "Y-m-d\TH:i:sP") : null)}'


'Neos.Neos:Document':
  search:
    fulltext:
      isRoot: true
  properties:
    'uriPathSegment':
      search:
        elasticSearchMapping:
          type: string
          index: not_analyzed
    title:
      search:
        fulltextExtractor: ${Indexing.extractInto('h1', value)}
    '__fulltextParts':
      search:
        elasticSearchMapping:
          type: object
          enabled: false
        indexing: ''
    '__fulltext':
      search:
        indexing: ''
        elasticSearchMapping:
          type: object
          properties:
            'h1':
              type: string
              index: analyzed
              boost: 20
            'h2':
              type: string
              index: analyzed
              boost: 12
            'h3':
              type: string
              index: analyzed
              boost: 10
            'h4':
              type: string
              index: analyzed
              boost: 5
            'h5':
              type: string
              index: analyzed
              boost: 3
            'h6':
              type: string
              index: analyzed
              boost: 2
            'text':
              type: string
              index: analyzed
              boost: 1
    '_hiddenInIndex':
      search:
        indexing: '${node.hiddenInIndex}'

'Neos.NodeTypes:Text':
  properties:
    'text':
      search:
        fulltextExtractor: '${Indexing.extractHtmlTags(value)}'

'Neos.NodeTypes:Headline':
  properties:
    'title':
      search:
        fulltextExtractor: '${Indexing.extractHtmlTags(value)}'


'Neos.NodeTypes:TextWithImage':
  properties:
    'text':
      search:
        fulltextExtractor: '${Indexing.extractHtmlTags(value)}'
